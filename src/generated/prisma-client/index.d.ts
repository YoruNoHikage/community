// Code generated by Prisma (prisma@1.25.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  game: (where?: GameWhereInput) => Promise<boolean>;
  image: (where?: ImageWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  person: (where?: PersonWhereInput) => Promise<boolean>;
  structure: (where?: StructureWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventPromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  game: (where: GameWhereUniqueInput) => GamePromise;
  games: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Game>;
  gamesConnection: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GameConnectionPromise;
  image: (where: ImageWhereUniqueInput) => ImagePromise;
  images: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Image>;
  imagesConnection: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImageConnectionPromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  person: (where: PersonWhereUniqueInput) => PersonPromise;
  persons: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Person>;
  personsConnection: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonConnectionPromise;
  structure: (where: StructureWhereUniqueInput) => StructurePromise;
  structures: (args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Structure>;
  structuresConnection: (args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StructureConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (args: {
    data: GameUpdateInput;
    where: GameWhereUniqueInput;
  }) => GamePromise;
  updateManyGames: (args: {
    data: GameUpdateManyMutationInput;
    where?: GameWhereInput;
  }) => BatchPayloadPromise;
  upsertGame: (args: {
    where: GameWhereUniqueInput;
    create: GameCreateInput;
    update: GameUpdateInput;
  }) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (args: {
    data: ImageUpdateInput;
    where: ImageWhereUniqueInput;
  }) => ImagePromise;
  updateManyImages: (args: {
    data: ImageUpdateManyMutationInput;
    where?: ImageWhereInput;
  }) => BatchPayloadPromise;
  upsertImage: (args: {
    where: ImageWhereUniqueInput;
    create: ImageCreateInput;
    update: ImageUpdateInput;
  }) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createPerson: (data: PersonCreateInput) => PersonPromise;
  updatePerson: (args: {
    data: PersonUpdateInput;
    where: PersonWhereUniqueInput;
  }) => PersonPromise;
  updateManyPersons: (args: {
    data: PersonUpdateManyMutationInput;
    where?: PersonWhereInput;
  }) => BatchPayloadPromise;
  upsertPerson: (args: {
    where: PersonWhereUniqueInput;
    create: PersonCreateInput;
    update: PersonUpdateInput;
  }) => PersonPromise;
  deletePerson: (where: PersonWhereUniqueInput) => PersonPromise;
  deleteManyPersons: (where?: PersonWhereInput) => BatchPayloadPromise;
  createStructure: (data: StructureCreateInput) => StructurePromise;
  updateStructure: (args: {
    data: StructureUpdateInput;
    where: StructureWhereUniqueInput;
  }) => StructurePromise;
  updateManyStructures: (args: {
    data: StructureUpdateManyMutationInput;
    where?: StructureWhereInput;
  }) => BatchPayloadPromise;
  upsertStructure: (args: {
    where: StructureWhereUniqueInput;
    create: StructureCreateInput;
    update: StructureUpdateInput;
  }) => StructurePromise;
  deleteStructure: (where: StructureWhereUniqueInput) => StructurePromise;
  deleteManyStructures: (where?: StructureWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  image: (
    where?: ImageSubscriptionWhereInput
  ) => ImageSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  person: (
    where?: PersonSubscriptionWhereInput
  ) => PersonSubscriptionPayloadSubscription;
  structure: (
    where?: StructureSubscriptionWhereInput
  ) => StructureSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StructureOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "name_ASC"
  | "name_DESC"
  | "about_ASC"
  | "about_DESC";

export type PersonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type StructureType = "STUDIO" | "ASSOCIATION" | "ORGANISATION";

export type ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC";

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "releasedAt_ASC"
  | "releasedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "about_ASC"
  | "about_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "about_ASC"
  | "about_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC";

export type LocationOrderByInput =
  | "country_ASC"
  | "country_DESC"
  | "city_ASC"
  | "city_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GameUpdateManyWithoutAuthorsInput {
  create?: GameCreateWithoutAuthorsInput[] | GameCreateWithoutAuthorsInput;
  delete?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  connect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  disconnect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  update?:
    | GameUpdateWithWhereUniqueWithoutAuthorsInput[]
    | GameUpdateWithWhereUniqueWithoutAuthorsInput;
  upsert?:
    | GameUpsertWithWhereUniqueWithoutAuthorsInput[]
    | GameUpsertWithWhereUniqueWithoutAuthorsInput;
  deleteMany?: GameScalarWhereInput[] | GameScalarWhereInput;
  updateMany?:
    | GameUpdateManyWithWhereNestedInput[]
    | GameUpdateManyWithWhereNestedInput;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StructureUpdateWithoutGamesDataInput {
  type?: StructureType;
  name?: String;
  about?: String;
  location?: LocationUpdateOneRequiredWithoutStructuresInput;
  people?: PersonUpdateManyWithoutStructuresInput;
  structures?: StructureUpdateManyInput;
  images?: ImageUpdateManyInput;
  events?: EventUpdateManyWithoutStructuresInput;
}

export interface ImageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  filename?: String;
  filename_not?: String;
  filename_in?: String[] | String;
  filename_not_in?: String[] | String;
  filename_lt?: String;
  filename_lte?: String;
  filename_gt?: String;
  filename_gte?: String;
  filename_contains?: String;
  filename_not_contains?: String;
  filename_starts_with?: String;
  filename_not_starts_with?: String;
  filename_ends_with?: String;
  filename_not_ends_with?: String;
  mimetype?: String;
  mimetype_not?: String;
  mimetype_in?: String[] | String;
  mimetype_not_in?: String[] | String;
  mimetype_lt?: String;
  mimetype_lte?: String;
  mimetype_gt?: String;
  mimetype_gte?: String;
  mimetype_contains?: String;
  mimetype_not_contains?: String;
  mimetype_starts_with?: String;
  mimetype_not_starts_with?: String;
  mimetype_ends_with?: String;
  mimetype_not_ends_with?: String;
  AND?: ImageWhereInput[] | ImageWhereInput;
  OR?: ImageWhereInput[] | ImageWhereInput;
  NOT?: ImageWhereInput[] | ImageWhereInput;
}

export interface LocationUpdateOneRequiredWithoutStructuresInput {
  create?: LocationCreateWithoutStructuresInput;
  update?: LocationUpdateWithoutStructuresDataInput;
  upsert?: LocationUpsertWithoutStructuresInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  avatar_every?: ImageWhereInput;
  avatar_some?: ImageWhereInput;
  avatar_none?: ImageWhereInput;
  person?: PersonWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface LocationUpdateWithoutStructuresDataInput {
  country?: String;
  city?: String;
  latitude?: Float;
  longitude?: Float;
  events?: EventUpdateManyWithoutLocationInput;
}

export interface EventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  location?: LocationWhereInput;
  images_every?: ImageWhereInput;
  images_some?: ImageWhereInput;
  images_none?: ImageWhereInput;
  authors_every?: PersonWhereInput;
  authors_some?: PersonWhereInput;
  authors_none?: PersonWhereInput;
  structures_every?: StructureWhereInput;
  structures_some?: StructureWhereInput;
  structures_none?: StructureWhereInput;
  games_every?: GameWhereInput;
  games_some?: GameWhereInput;
  games_none?: GameWhereInput;
  AND?: EventWhereInput[] | EventWhereInput;
  OR?: EventWhereInput[] | EventWhereInput;
  NOT?: EventWhereInput[] | EventWhereInput;
}

export interface StructureUpdateManyWithoutLocationInput {
  create?:
    | StructureCreateWithoutLocationInput[]
    | StructureCreateWithoutLocationInput;
  delete?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  disconnect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  update?:
    | StructureUpdateWithWhereUniqueWithoutLocationInput[]
    | StructureUpdateWithWhereUniqueWithoutLocationInput;
  upsert?:
    | StructureUpsertWithWhereUniqueWithoutLocationInput[]
    | StructureUpsertWithWhereUniqueWithoutLocationInput;
  deleteMany?: StructureScalarWhereInput[] | StructureScalarWhereInput;
  updateMany?:
    | StructureUpdateManyWithWhereNestedInput[]
    | StructureUpdateManyWithWhereNestedInput;
}

export interface LocationUpsertWithoutStructuresInput {
  update: LocationUpdateWithoutStructuresDataInput;
  create: LocationCreateWithoutStructuresInput;
}

export interface StructureUpdateWithWhereUniqueWithoutLocationInput {
  where: StructureWhereUniqueInput;
  data: StructureUpdateWithoutLocationDataInput;
}

export interface EventUpdateManyWithoutLocationInput {
  create?: EventCreateWithoutLocationInput[] | EventCreateWithoutLocationInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutLocationInput[]
    | EventUpdateWithWhereUniqueWithoutLocationInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutLocationInput[]
    | EventUpsertWithWhereUniqueWithoutLocationInput;
  deleteMany?: EventScalarWhereInput[] | EventScalarWhereInput;
  updateMany?:
    | EventUpdateManyWithWhereNestedInput[]
    | EventUpdateManyWithWhereNestedInput;
}

export interface StructureUpdateWithoutLocationDataInput {
  type?: StructureType;
  name?: String;
  about?: String;
  people?: PersonUpdateManyWithoutStructuresInput;
  structures?: StructureUpdateManyInput;
  images?: ImageUpdateManyInput;
  games?: GameUpdateManyWithoutStructuresInput;
  events?: EventUpdateManyWithoutStructuresInput;
}

export interface StructureSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StructureWhereInput;
  AND?: StructureSubscriptionWhereInput[] | StructureSubscriptionWhereInput;
  OR?: StructureSubscriptionWhereInput[] | StructureSubscriptionWhereInput;
  NOT?: StructureSubscriptionWhereInput[] | StructureSubscriptionWhereInput;
}

export interface PersonUpdateManyWithoutStructuresInput {
  create?:
    | PersonCreateWithoutStructuresInput[]
    | PersonCreateWithoutStructuresInput;
  delete?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  disconnect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  update?:
    | PersonUpdateWithWhereUniqueWithoutStructuresInput[]
    | PersonUpdateWithWhereUniqueWithoutStructuresInput;
  upsert?:
    | PersonUpsertWithWhereUniqueWithoutStructuresInput[]
    | PersonUpsertWithWhereUniqueWithoutStructuresInput;
  deleteMany?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  updateMany?:
    | PersonUpdateManyWithWhereNestedInput[]
    | PersonUpdateManyWithWhereNestedInput;
}

export interface PersonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonWhereInput;
  AND?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  OR?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  NOT?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
}

export interface PersonUpdateWithWhereUniqueWithoutStructuresInput {
  where: PersonWhereUniqueInput;
  data: PersonUpdateWithoutStructuresDataInput;
}

export interface ImageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ImageWhereInput;
  AND?: ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput;
  OR?: ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput;
  NOT?: ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput;
}

export interface PersonUpdateWithoutStructuresDataInput {
  user?: UserUpdateOneWithoutPersonInput;
  name?: String;
  games?: GameUpdateManyWithoutAuthorsInput;
  events?: EventUpdateManyWithoutAuthorsInput;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EventWhereInput;
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  OR?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  NOT?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
}

export interface UserUpdateOneWithoutPersonInput {
  create?: UserCreateWithoutPersonInput;
  update?: UserUpdateWithoutPersonDataInput;
  upsert?: UserUpsertWithoutPersonInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface PersonUpsertWithoutUserInput {
  update: PersonUpdateWithoutUserDataInput;
  create: PersonCreateWithoutUserInput;
}

export interface UserUpdateWithoutPersonDataInput {
  email?: String;
  avatar?: ImageUpdateManyInput;
}

export interface PersonUpdateOneWithoutUserInput {
  create?: PersonCreateWithoutUserInput;
  update?: PersonUpdateWithoutUserDataInput;
  upsert?: PersonUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PersonWhereUniqueInput;
}

export interface ImageUpdateManyInput {
  create?: ImageCreateInput[] | ImageCreateInput;
  update?:
    | ImageUpdateWithWhereUniqueNestedInput[]
    | ImageUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ImageUpsertWithWhereUniqueNestedInput[]
    | ImageUpsertWithWhereUniqueNestedInput;
  delete?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  disconnect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  deleteMany?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  updateMany?:
    | ImageUpdateManyWithWhereNestedInput[]
    | ImageUpdateManyWithWhereNestedInput;
}

export interface UserUpdateInput {
  email?: String;
  avatar?: ImageUpdateManyInput;
  person?: PersonUpdateOneWithoutUserInput;
}

export interface ImageUpdateWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateDataInput;
}

export interface PersonCreateOneWithoutUserInput {
  create?: PersonCreateWithoutUserInput;
  connect?: PersonWhereUniqueInput;
}

export interface ImageUpdateDataInput {
  filename?: String;
  mimetype?: String;
}

export interface UserCreateInput {
  email: String;
  avatar?: ImageCreateManyInput;
  person?: PersonCreateOneWithoutUserInput;
}

export interface ImageUpsertWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateDataInput;
  create: ImageCreateInput;
}

export interface StructureUpdateInput {
  type?: StructureType;
  name?: String;
  about?: String;
  location?: LocationUpdateOneRequiredWithoutStructuresInput;
  people?: PersonUpdateManyWithoutStructuresInput;
  structures?: StructureUpdateManyInput;
  images?: ImageUpdateManyInput;
  games?: GameUpdateManyWithoutStructuresInput;
  events?: EventUpdateManyWithoutStructuresInput;
}

export interface ImageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  filename?: String;
  filename_not?: String;
  filename_in?: String[] | String;
  filename_not_in?: String[] | String;
  filename_lt?: String;
  filename_lte?: String;
  filename_gt?: String;
  filename_gte?: String;
  filename_contains?: String;
  filename_not_contains?: String;
  filename_starts_with?: String;
  filename_not_starts_with?: String;
  filename_ends_with?: String;
  filename_not_ends_with?: String;
  mimetype?: String;
  mimetype_not?: String;
  mimetype_in?: String[] | String;
  mimetype_not_in?: String[] | String;
  mimetype_lt?: String;
  mimetype_lte?: String;
  mimetype_gt?: String;
  mimetype_gte?: String;
  mimetype_contains?: String;
  mimetype_not_contains?: String;
  mimetype_starts_with?: String;
  mimetype_not_starts_with?: String;
  mimetype_ends_with?: String;
  mimetype_not_ends_with?: String;
  AND?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  OR?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  NOT?: ImageScalarWhereInput[] | ImageScalarWhereInput;
}

export interface PersonUpdateInput {
  user?: UserUpdateOneWithoutPersonInput;
  name?: String;
  structures?: StructureUpdateManyWithoutPeopleInput;
  games?: GameUpdateManyWithoutAuthorsInput;
  events?: EventUpdateManyWithoutAuthorsInput;
}

export interface ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput;
  data: ImageUpdateManyDataInput;
}

export interface LocationUpdateManyMutationInput {
  country?: String;
  city?: String;
  latitude?: Float;
  longitude?: Float;
}

export interface ImageUpdateManyDataInput {
  filename?: String;
  mimetype?: String;
}

export interface LocationCreateInput {
  country: String;
  city: String;
  latitude: Float;
  longitude: Float;
  structures?: StructureCreateManyWithoutLocationInput;
  events?: EventCreateManyWithoutLocationInput;
}

export interface UserUpsertWithoutPersonInput {
  update: UserUpdateWithoutPersonDataInput;
  create: UserCreateWithoutPersonInput;
}

export interface ImageUpdateInput {
  filename?: String;
  mimetype?: String;
}

export interface GameUpsertWithWhereUniqueWithoutAuthorsInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutAuthorsDataInput;
  create: GameCreateWithoutAuthorsInput;
}

export interface GameUpdateManyMutationInput {
  releasedAt?: DateTimeInput;
  name?: String;
  about?: String;
}

export interface GameUpdateWithWhereUniqueWithoutAuthorsInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutAuthorsDataInput;
}

export interface GameCreateInput {
  releasedAt?: DateTimeInput;
  name: String;
  about: String;
  authors?: PersonCreateManyWithoutGamesInput;
  structures?: StructureCreateManyWithoutGamesInput;
  images?: ImageCreateManyInput;
  events?: EventCreateManyWithoutGamesInput;
}

export interface GameUpdateWithoutAuthorsDataInput {
  releasedAt?: DateTimeInput;
  name?: String;
  about?: String;
  structures?: StructureUpdateManyWithoutGamesInput;
  images?: ImageUpdateManyInput;
  events?: EventUpdateManyWithoutGamesInput;
}

export interface EventUpdateManyMutationInput {
  name?: String;
  about?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface StructureUpdateManyWithoutGamesInput {
  create?:
    | StructureCreateWithoutGamesInput[]
    | StructureCreateWithoutGamesInput;
  delete?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  disconnect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  update?:
    | StructureUpdateWithWhereUniqueWithoutGamesInput[]
    | StructureUpdateWithWhereUniqueWithoutGamesInput;
  upsert?:
    | StructureUpsertWithWhereUniqueWithoutGamesInput[]
    | StructureUpsertWithWhereUniqueWithoutGamesInput;
  deleteMany?: StructureScalarWhereInput[] | StructureScalarWhereInput;
  updateMany?:
    | StructureUpdateManyWithWhereNestedInput[]
    | StructureUpdateManyWithWhereNestedInput;
}

export interface StructureUpsertWithWhereUniqueWithoutLocationInput {
  where: StructureWhereUniqueInput;
  update: StructureUpdateWithoutLocationDataInput;
  create: StructureCreateWithoutLocationInput;
}

export interface StructureUpdateWithWhereUniqueWithoutGamesInput {
  where: StructureWhereUniqueInput;
  data: StructureUpdateWithoutGamesDataInput;
}

export interface LocationCreateOneWithoutEventsInput {
  create?: LocationCreateWithoutEventsInput;
}

export interface PersonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  structures_every?: StructureWhereInput;
  structures_some?: StructureWhereInput;
  structures_none?: StructureWhereInput;
  games_every?: GameWhereInput;
  games_some?: GameWhereInput;
  games_none?: GameWhereInput;
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  AND?: PersonWhereInput[] | PersonWhereInput;
  OR?: PersonWhereInput[] | PersonWhereInput;
  NOT?: PersonWhereInput[] | PersonWhereInput;
}

export interface StructureCreateManyWithoutLocationInput {
  create?:
    | StructureCreateWithoutLocationInput[]
    | StructureCreateWithoutLocationInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
}

export interface GameWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  releasedAt?: DateTimeInput;
  releasedAt_not?: DateTimeInput;
  releasedAt_in?: DateTimeInput[] | DateTimeInput;
  releasedAt_not_in?: DateTimeInput[] | DateTimeInput;
  releasedAt_lt?: DateTimeInput;
  releasedAt_lte?: DateTimeInput;
  releasedAt_gt?: DateTimeInput;
  releasedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  authors_every?: PersonWhereInput;
  authors_some?: PersonWhereInput;
  authors_none?: PersonWhereInput;
  structures_every?: StructureWhereInput;
  structures_some?: StructureWhereInput;
  structures_none?: StructureWhereInput;
  images_every?: ImageWhereInput;
  images_some?: ImageWhereInput;
  images_none?: ImageWhereInput;
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  AND?: GameWhereInput[] | GameWhereInput;
  OR?: GameWhereInput[] | GameWhereInput;
  NOT?: GameWhereInput[] | GameWhereInput;
}

export interface PersonCreateManyWithoutStructuresInput {
  create?:
    | PersonCreateWithoutStructuresInput[]
    | PersonCreateWithoutStructuresInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
}

export interface StructureUpsertWithWhereUniqueWithoutGamesInput {
  where: StructureWhereUniqueInput;
  update: StructureUpdateWithoutGamesDataInput;
  create: StructureCreateWithoutGamesInput;
}

export interface UserCreateOneWithoutPersonInput {
  create?: UserCreateWithoutPersonInput;
  connect?: UserWhereUniqueInput;
}

export interface LocationWhereInput {
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  latitude?: Float;
  latitude_not?: Float;
  latitude_in?: Float[] | Float;
  latitude_not_in?: Float[] | Float;
  latitude_lt?: Float;
  latitude_lte?: Float;
  latitude_gt?: Float;
  latitude_gte?: Float;
  longitude?: Float;
  longitude_not?: Float;
  longitude_in?: Float[] | Float;
  longitude_not_in?: Float[] | Float;
  longitude_lt?: Float;
  longitude_lte?: Float;
  longitude_gt?: Float;
  longitude_gte?: Float;
  structures_every?: StructureWhereInput;
  structures_some?: StructureWhereInput;
  structures_none?: StructureWhereInput;
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  AND?: LocationWhereInput[] | LocationWhereInput;
  OR?: LocationWhereInput[] | LocationWhereInput;
  NOT?: LocationWhereInput[] | LocationWhereInput;
}

export interface ImageCreateManyInput {
  create?: ImageCreateInput[] | ImageCreateInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
}

export interface EventUpdateWithWhereUniqueWithoutLocationInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutLocationDataInput;
}

export interface GameCreateManyWithoutAuthorsInput {
  create?: GameCreateWithoutAuthorsInput[] | GameCreateWithoutAuthorsInput;
  connect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
}

export interface EventUpdateWithoutLocationDataInput {
  name?: String;
  about?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  images?: ImageUpdateManyInput;
  authors?: PersonUpdateManyWithoutEventsInput;
  structures?: StructureUpdateManyWithoutEventsInput;
  games?: GameUpdateManyWithoutEventsInput;
}

export interface StructureCreateManyWithoutGamesInput {
  create?:
    | StructureCreateWithoutGamesInput[]
    | StructureCreateWithoutGamesInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
}

export interface PersonUpdateManyWithoutEventsInput {
  create?: PersonCreateWithoutEventsInput[] | PersonCreateWithoutEventsInput;
  delete?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  disconnect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  update?:
    | PersonUpdateWithWhereUniqueWithoutEventsInput[]
    | PersonUpdateWithWhereUniqueWithoutEventsInput;
  upsert?:
    | PersonUpsertWithWhereUniqueWithoutEventsInput[]
    | PersonUpsertWithWhereUniqueWithoutEventsInput;
  deleteMany?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  updateMany?:
    | PersonUpdateManyWithWhereNestedInput[]
    | PersonUpdateManyWithWhereNestedInput;
}

export interface LocationCreateOneWithoutStructuresInput {
  create?: LocationCreateWithoutStructuresInput;
}

export interface PersonUpdateWithWhereUniqueWithoutEventsInput {
  where: PersonWhereUniqueInput;
  data: PersonUpdateWithoutEventsDataInput;
}

export interface EventCreateManyWithoutLocationInput {
  create?: EventCreateWithoutLocationInput[] | EventCreateWithoutLocationInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface PersonUpdateWithoutEventsDataInput {
  user?: UserUpdateOneWithoutPersonInput;
  name?: String;
  structures?: StructureUpdateManyWithoutPeopleInput;
  games?: GameUpdateManyWithoutAuthorsInput;
}

export interface PersonCreateManyWithoutEventsInput {
  create?: PersonCreateWithoutEventsInput[] | PersonCreateWithoutEventsInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
}

export interface StructureUpdateManyWithoutPeopleInput {
  create?:
    | StructureCreateWithoutPeopleInput[]
    | StructureCreateWithoutPeopleInput;
  delete?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  disconnect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  update?:
    | StructureUpdateWithWhereUniqueWithoutPeopleInput[]
    | StructureUpdateWithWhereUniqueWithoutPeopleInput;
  upsert?:
    | StructureUpsertWithWhereUniqueWithoutPeopleInput[]
    | StructureUpsertWithWhereUniqueWithoutPeopleInput;
  deleteMany?: StructureScalarWhereInput[] | StructureScalarWhereInput;
  updateMany?:
    | StructureUpdateManyWithWhereNestedInput[]
    | StructureUpdateManyWithWhereNestedInput;
}

export interface StructureCreateManyWithoutPeopleInput {
  create?:
    | StructureCreateWithoutPeopleInput[]
    | StructureCreateWithoutPeopleInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
}

export interface StructureUpdateWithWhereUniqueWithoutPeopleInput {
  where: StructureWhereUniqueInput;
  data: StructureUpdateWithoutPeopleDataInput;
}

export interface StructureCreateManyInput {
  create?: StructureCreateInput[] | StructureCreateInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
}

export interface StructureUpdateWithoutPeopleDataInput {
  type?: StructureType;
  name?: String;
  about?: String;
  location?: LocationUpdateOneRequiredWithoutStructuresInput;
  structures?: StructureUpdateManyInput;
  images?: ImageUpdateManyInput;
  games?: GameUpdateManyWithoutStructuresInput;
  events?: EventUpdateManyWithoutStructuresInput;
}

export interface GameCreateManyWithoutStructuresInput {
  create?:
    | GameCreateWithoutStructuresInput[]
    | GameCreateWithoutStructuresInput;
  connect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
}

export interface StructureUpdateManyInput {
  create?: StructureCreateInput[] | StructureCreateInput;
  update?:
    | StructureUpdateWithWhereUniqueNestedInput[]
    | StructureUpdateWithWhereUniqueNestedInput;
  upsert?:
    | StructureUpsertWithWhereUniqueNestedInput[]
    | StructureUpsertWithWhereUniqueNestedInput;
  delete?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  disconnect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  deleteMany?: StructureScalarWhereInput[] | StructureScalarWhereInput;
  updateMany?:
    | StructureUpdateManyWithWhereNestedInput[]
    | StructureUpdateManyWithWhereNestedInput;
}

export interface PersonCreateManyWithoutGamesInput {
  create?: PersonCreateWithoutGamesInput[] | PersonCreateWithoutGamesInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
}

export interface StructureUpdateWithWhereUniqueNestedInput {
  where: StructureWhereUniqueInput;
  data: StructureUpdateDataInput;
}

export interface EventCreateManyWithoutAuthorsInput {
  create?: EventCreateWithoutAuthorsInput[] | EventCreateWithoutAuthorsInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface StructureUpdateDataInput {
  type?: StructureType;
  name?: String;
  about?: String;
  location?: LocationUpdateOneRequiredWithoutStructuresInput;
  people?: PersonUpdateManyWithoutStructuresInput;
  structures?: StructureUpdateManyInput;
  images?: ImageUpdateManyInput;
  games?: GameUpdateManyWithoutStructuresInput;
  events?: EventUpdateManyWithoutStructuresInput;
}

export interface StructureCreateManyWithoutEventsInput {
  create?:
    | StructureCreateWithoutEventsInput[]
    | StructureCreateWithoutEventsInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
}

export interface GameUpdateManyWithoutStructuresInput {
  create?:
    | GameCreateWithoutStructuresInput[]
    | GameCreateWithoutStructuresInput;
  delete?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  connect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  disconnect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  update?:
    | GameUpdateWithWhereUniqueWithoutStructuresInput[]
    | GameUpdateWithWhereUniqueWithoutStructuresInput;
  upsert?:
    | GameUpsertWithWhereUniqueWithoutStructuresInput[]
    | GameUpsertWithWhereUniqueWithoutStructuresInput;
  deleteMany?: GameScalarWhereInput[] | GameScalarWhereInput;
  updateMany?:
    | GameUpdateManyWithWhereNestedInput[]
    | GameUpdateManyWithWhereNestedInput;
}

export interface GameCreateManyWithoutEventsInput {
  create?: GameCreateWithoutEventsInput[] | GameCreateWithoutEventsInput;
  connect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
}

export interface GameUpdateWithWhereUniqueWithoutStructuresInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutStructuresDataInput;
}

export interface EventCreateManyWithoutGamesInput {
  create?: EventCreateWithoutGamesInput[] | EventCreateWithoutGamesInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface GameUpdateWithoutStructuresDataInput {
  releasedAt?: DateTimeInput;
  name?: String;
  about?: String;
  authors?: PersonUpdateManyWithoutGamesInput;
  images?: ImageUpdateManyInput;
  events?: EventUpdateManyWithoutGamesInput;
}

export interface EventCreateManyWithoutStructuresInput {
  create?:
    | EventCreateWithoutStructuresInput[]
    | EventCreateWithoutStructuresInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface PersonUpdateManyWithoutGamesInput {
  create?: PersonCreateWithoutGamesInput[] | PersonCreateWithoutGamesInput;
  delete?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  disconnect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  update?:
    | PersonUpdateWithWhereUniqueWithoutGamesInput[]
    | PersonUpdateWithWhereUniqueWithoutGamesInput;
  upsert?:
    | PersonUpsertWithWhereUniqueWithoutGamesInput[]
    | PersonUpsertWithWhereUniqueWithoutGamesInput;
  deleteMany?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  updateMany?:
    | PersonUpdateManyWithWhereNestedInput[]
    | PersonUpdateManyWithWhereNestedInput;
}

export interface EventUpdateInput {
  name?: String;
  about?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  location?: LocationUpdateOneWithoutEventsInput;
  images?: ImageUpdateManyInput;
  authors?: PersonUpdateManyWithoutEventsInput;
  structures?: StructureUpdateManyWithoutEventsInput;
  games?: GameUpdateManyWithoutEventsInput;
}

export interface PersonUpdateWithWhereUniqueWithoutGamesInput {
  where: PersonWhereUniqueInput;
  data: PersonUpdateWithoutGamesDataInput;
}

export interface LocationUpdateWithoutEventsDataInput {
  country?: String;
  city?: String;
  latitude?: Float;
  longitude?: Float;
  structures?: StructureUpdateManyWithoutLocationInput;
}

export interface PersonUpdateWithoutGamesDataInput {
  user?: UserUpdateOneWithoutPersonInput;
  name?: String;
  structures?: StructureUpdateManyWithoutPeopleInput;
  events?: EventUpdateManyWithoutAuthorsInput;
}

export interface StructureWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  type?: StructureType;
  type_not?: StructureType;
  type_in?: StructureType[] | StructureType;
  type_not_in?: StructureType[] | StructureType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  location?: LocationWhereInput;
  people_every?: PersonWhereInput;
  people_some?: PersonWhereInput;
  people_none?: PersonWhereInput;
  structures_every?: StructureWhereInput;
  structures_some?: StructureWhereInput;
  structures_none?: StructureWhereInput;
  images_every?: ImageWhereInput;
  images_some?: ImageWhereInput;
  images_none?: ImageWhereInput;
  games_every?: GameWhereInput;
  games_some?: GameWhereInput;
  games_none?: GameWhereInput;
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  AND?: StructureWhereInput[] | StructureWhereInput;
  OR?: StructureWhereInput[] | StructureWhereInput;
  NOT?: StructureWhereInput[] | StructureWhereInput;
}

export interface EventUpdateManyWithoutAuthorsInput {
  create?: EventCreateWithoutAuthorsInput[] | EventCreateWithoutAuthorsInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutAuthorsInput[]
    | EventUpdateWithWhereUniqueWithoutAuthorsInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutAuthorsInput[]
    | EventUpsertWithWhereUniqueWithoutAuthorsInput;
  deleteMany?: EventScalarWhereInput[] | EventScalarWhereInput;
  updateMany?:
    | EventUpdateManyWithWhereNestedInput[]
    | EventUpdateManyWithWhereNestedInput;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GameWhereInput;
  AND?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  OR?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  NOT?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
}

export interface EventUpdateWithWhereUniqueWithoutAuthorsInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutAuthorsDataInput;
}

export interface PersonUpdateWithoutUserDataInput {
  name?: String;
  structures?: StructureUpdateManyWithoutPeopleInput;
  games?: GameUpdateManyWithoutAuthorsInput;
  events?: EventUpdateManyWithoutAuthorsInput;
}

export interface EventUpdateWithoutAuthorsDataInput {
  name?: String;
  about?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  location?: LocationUpdateOneWithoutEventsInput;
  images?: ImageUpdateManyInput;
  structures?: StructureUpdateManyWithoutEventsInput;
  games?: GameUpdateManyWithoutEventsInput;
}

export interface PersonCreateWithoutUserInput {
  name: String;
  structures?: StructureCreateManyWithoutPeopleInput;
  games?: GameCreateManyWithoutAuthorsInput;
  events?: EventCreateManyWithoutAuthorsInput;
}

export interface StructureUpdateManyWithoutEventsInput {
  create?:
    | StructureCreateWithoutEventsInput[]
    | StructureCreateWithoutEventsInput;
  delete?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  connect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  disconnect?: StructureWhereUniqueInput[] | StructureWhereUniqueInput;
  update?:
    | StructureUpdateWithWhereUniqueWithoutEventsInput[]
    | StructureUpdateWithWhereUniqueWithoutEventsInput;
  upsert?:
    | StructureUpsertWithWhereUniqueWithoutEventsInput[]
    | StructureUpsertWithWhereUniqueWithoutEventsInput;
  deleteMany?: StructureScalarWhereInput[] | StructureScalarWhereInput;
  updateMany?:
    | StructureUpdateManyWithWhereNestedInput[]
    | StructureUpdateManyWithWhereNestedInput;
}

export interface StructureUpdateManyMutationInput {
  type?: StructureType;
  name?: String;
  about?: String;
}

export interface StructureUpdateWithWhereUniqueWithoutEventsInput {
  where: StructureWhereUniqueInput;
  data: StructureUpdateWithoutEventsDataInput;
}

export interface PersonCreateInput {
  user?: UserCreateOneWithoutPersonInput;
  name: String;
  structures?: StructureCreateManyWithoutPeopleInput;
  games?: GameCreateManyWithoutAuthorsInput;
  events?: EventCreateManyWithoutAuthorsInput;
}

export interface StructureUpdateWithoutEventsDataInput {
  type?: StructureType;
  name?: String;
  about?: String;
  location?: LocationUpdateOneRequiredWithoutStructuresInput;
  people?: PersonUpdateManyWithoutStructuresInput;
  structures?: StructureUpdateManyInput;
  images?: ImageUpdateManyInput;
  games?: GameUpdateManyWithoutStructuresInput;
}

export interface ImageUpdateManyMutationInput {
  filename?: String;
  mimetype?: String;
}

export interface StructureUpsertWithWhereUniqueWithoutEventsInput {
  where: StructureWhereUniqueInput;
  update: StructureUpdateWithoutEventsDataInput;
  create: StructureCreateWithoutEventsInput;
}

export interface GameUpdateInput {
  releasedAt?: DateTimeInput;
  name?: String;
  about?: String;
  authors?: PersonUpdateManyWithoutGamesInput;
  structures?: StructureUpdateManyWithoutGamesInput;
  images?: ImageUpdateManyInput;
  events?: EventUpdateManyWithoutGamesInput;
}

export interface StructureScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  type?: StructureType;
  type_not?: StructureType;
  type_in?: StructureType[] | StructureType;
  type_not_in?: StructureType[] | StructureType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  AND?: StructureScalarWhereInput[] | StructureScalarWhereInput;
  OR?: StructureScalarWhereInput[] | StructureScalarWhereInput;
  NOT?: StructureScalarWhereInput[] | StructureScalarWhereInput;
}

export interface LocationUpsertWithoutEventsInput {
  update: LocationUpdateWithoutEventsDataInput;
  create: LocationCreateWithoutEventsInput;
}

export interface StructureUpdateManyWithWhereNestedInput {
  where: StructureScalarWhereInput;
  data: StructureUpdateManyDataInput;
}

export interface EventCreateInput {
  name: String;
  about: String;
  start: DateTimeInput;
  end: DateTimeInput;
  location?: LocationCreateOneWithoutEventsInput;
  images?: ImageCreateManyInput;
  authors?: PersonCreateManyWithoutEventsInput;
  structures?: StructureCreateManyWithoutEventsInput;
  games?: GameCreateManyWithoutEventsInput;
}

export interface StructureUpdateManyDataInput {
  type?: StructureType;
  name?: String;
  about?: String;
}

export interface StructureCreateWithoutLocationInput {
  type: StructureType;
  name: String;
  about: String;
  people?: PersonCreateManyWithoutStructuresInput;
  structures?: StructureCreateManyInput;
  images?: ImageCreateManyInput;
  games?: GameCreateManyWithoutStructuresInput;
  events?: EventCreateManyWithoutStructuresInput;
}

export interface GameUpdateManyWithoutEventsInput {
  create?: GameCreateWithoutEventsInput[] | GameCreateWithoutEventsInput;
  delete?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  connect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  disconnect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  update?:
    | GameUpdateWithWhereUniqueWithoutEventsInput[]
    | GameUpdateWithWhereUniqueWithoutEventsInput;
  upsert?:
    | GameUpsertWithWhereUniqueWithoutEventsInput[]
    | GameUpsertWithWhereUniqueWithoutEventsInput;
  deleteMany?: GameScalarWhereInput[] | GameScalarWhereInput;
  updateMany?:
    | GameUpdateManyWithWhereNestedInput[]
    | GameUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutPersonInput {
  email: String;
  avatar?: ImageCreateManyInput;
}

export interface GameUpdateWithWhereUniqueWithoutEventsInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutEventsDataInput;
}

export interface GameCreateWithoutAuthorsInput {
  releasedAt?: DateTimeInput;
  name: String;
  about: String;
  structures?: StructureCreateManyWithoutGamesInput;
  images?: ImageCreateManyInput;
  events?: EventCreateManyWithoutGamesInput;
}

export interface GameUpdateWithoutEventsDataInput {
  releasedAt?: DateTimeInput;
  name?: String;
  about?: String;
  authors?: PersonUpdateManyWithoutGamesInput;
  structures?: StructureUpdateManyWithoutGamesInput;
  images?: ImageUpdateManyInput;
}

export interface LocationCreateWithoutStructuresInput {
  country: String;
  city: String;
  latitude: Float;
  longitude: Float;
  events?: EventCreateManyWithoutLocationInput;
}

export interface GameUpsertWithWhereUniqueWithoutEventsInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutEventsDataInput;
  create: GameCreateWithoutEventsInput;
}

export interface PersonCreateWithoutEventsInput {
  user?: UserCreateOneWithoutPersonInput;
  name: String;
  structures?: StructureCreateManyWithoutPeopleInput;
  games?: GameCreateManyWithoutAuthorsInput;
}

export interface GameScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  releasedAt?: DateTimeInput;
  releasedAt_not?: DateTimeInput;
  releasedAt_in?: DateTimeInput[] | DateTimeInput;
  releasedAt_not_in?: DateTimeInput[] | DateTimeInput;
  releasedAt_lt?: DateTimeInput;
  releasedAt_lte?: DateTimeInput;
  releasedAt_gt?: DateTimeInput;
  releasedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  AND?: GameScalarWhereInput[] | GameScalarWhereInput;
  OR?: GameScalarWhereInput[] | GameScalarWhereInput;
  NOT?: GameScalarWhereInput[] | GameScalarWhereInput;
}

export interface StructureCreateInput {
  type: StructureType;
  name: String;
  about: String;
  location: LocationCreateOneWithoutStructuresInput;
  people?: PersonCreateManyWithoutStructuresInput;
  structures?: StructureCreateManyInput;
  images?: ImageCreateManyInput;
  games?: GameCreateManyWithoutStructuresInput;
  events?: EventCreateManyWithoutStructuresInput;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface PersonCreateWithoutGamesInput {
  user?: UserCreateOneWithoutPersonInput;
  name: String;
  structures?: StructureCreateManyWithoutPeopleInput;
  events?: EventCreateManyWithoutAuthorsInput;
}

export interface GameUpdateManyDataInput {
  releasedAt?: DateTimeInput;
  name?: String;
  about?: String;
}

export interface StructureCreateWithoutEventsInput {
  type: StructureType;
  name: String;
  about: String;
  location: LocationCreateOneWithoutStructuresInput;
  people?: PersonCreateManyWithoutStructuresInput;
  structures?: StructureCreateManyInput;
  images?: ImageCreateManyInput;
  games?: GameCreateManyWithoutStructuresInput;
}

export interface EventUpsertWithWhereUniqueWithoutAuthorsInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutAuthorsDataInput;
  create: EventCreateWithoutAuthorsInput;
}

export interface EventCreateWithoutGamesInput {
  name: String;
  about: String;
  start: DateTimeInput;
  end: DateTimeInput;
  location?: LocationCreateOneWithoutEventsInput;
  images?: ImageCreateManyInput;
  authors?: PersonCreateManyWithoutEventsInput;
  structures?: StructureCreateManyWithoutEventsInput;
}

export interface EventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  AND?: EventScalarWhereInput[] | EventScalarWhereInput;
  OR?: EventScalarWhereInput[] | EventScalarWhereInput;
  NOT?: EventScalarWhereInput[] | EventScalarWhereInput;
}

export interface LocationUpdateOneWithoutEventsInput {
  create?: LocationCreateWithoutEventsInput;
  update?: LocationUpdateWithoutEventsDataInput;
  upsert?: LocationUpsertWithoutEventsInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LocationWhereInput;
  AND?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  OR?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  NOT?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
}

export interface EventUpdateManyDataInput {
  name?: String;
  about?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export type GameWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PersonUpsertWithWhereUniqueWithoutGamesInput {
  where: PersonWhereUniqueInput;
  update: PersonUpdateWithoutGamesDataInput;
  create: PersonCreateWithoutGamesInput;
}

export interface PersonUpdateManyMutationInput {
  name?: String;
}

export interface PersonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  OR?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  NOT?: PersonScalarWhereInput[] | PersonScalarWhereInput;
}

export type StructureWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PersonUpdateManyWithWhereNestedInput {
  where: PersonScalarWhereInput;
  data: PersonUpdateManyDataInput;
}

export interface PersonUpsertWithWhereUniqueWithoutStructuresInput {
  where: PersonWhereUniqueInput;
  update: PersonUpdateWithoutStructuresDataInput;
  create: PersonCreateWithoutStructuresInput;
}

export interface PersonUpdateManyDataInput {
  name?: String;
}

export interface PersonCreateWithoutStructuresInput {
  user?: UserCreateOneWithoutPersonInput;
  name: String;
  games?: GameCreateManyWithoutAuthorsInput;
  events?: EventCreateManyWithoutAuthorsInput;
}

export interface EventUpdateManyWithoutGamesInput {
  create?: EventCreateWithoutGamesInput[] | EventCreateWithoutGamesInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutGamesInput[]
    | EventUpdateWithWhereUniqueWithoutGamesInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutGamesInput[]
    | EventUpsertWithWhereUniqueWithoutGamesInput;
  deleteMany?: EventScalarWhereInput[] | EventScalarWhereInput;
  updateMany?:
    | EventUpdateManyWithWhereNestedInput[]
    | EventUpdateManyWithWhereNestedInput;
}

export interface StructureCreateWithoutGamesInput {
  type: StructureType;
  name: String;
  about: String;
  location: LocationCreateOneWithoutStructuresInput;
  people?: PersonCreateManyWithoutStructuresInput;
  structures?: StructureCreateManyInput;
  images?: ImageCreateManyInput;
  events?: EventCreateManyWithoutStructuresInput;
}

export interface EventUpdateWithWhereUniqueWithoutGamesInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutGamesDataInput;
}

export interface StructureCreateWithoutPeopleInput {
  type: StructureType;
  name: String;
  about: String;
  location: LocationCreateOneWithoutStructuresInput;
  structures?: StructureCreateManyInput;
  images?: ImageCreateManyInput;
  games?: GameCreateManyWithoutStructuresInput;
  events?: EventCreateManyWithoutStructuresInput;
}

export interface EventUpdateWithoutGamesDataInput {
  name?: String;
  about?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  location?: LocationUpdateOneWithoutEventsInput;
  images?: ImageUpdateManyInput;
  authors?: PersonUpdateManyWithoutEventsInput;
  structures?: StructureUpdateManyWithoutEventsInput;
}

export interface EventCreateWithoutAuthorsInput {
  name: String;
  about: String;
  start: DateTimeInput;
  end: DateTimeInput;
  location?: LocationCreateOneWithoutEventsInput;
  images?: ImageCreateManyInput;
  structures?: StructureCreateManyWithoutEventsInput;
  games?: GameCreateManyWithoutEventsInput;
}

export interface EventUpsertWithWhereUniqueWithoutGamesInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutGamesDataInput;
  create: EventCreateWithoutGamesInput;
}

export interface EventCreateWithoutStructuresInput {
  name: String;
  about: String;
  start: DateTimeInput;
  end: DateTimeInput;
  location?: LocationCreateOneWithoutEventsInput;
  images?: ImageCreateManyInput;
  authors?: PersonCreateManyWithoutEventsInput;
  games?: GameCreateManyWithoutEventsInput;
}

export interface GameUpsertWithWhereUniqueWithoutStructuresInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutStructuresDataInput;
  create: GameCreateWithoutStructuresInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
}

export interface EventUpdateManyWithoutStructuresInput {
  create?:
    | EventCreateWithoutStructuresInput[]
    | EventCreateWithoutStructuresInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutStructuresInput[]
    | EventUpdateWithWhereUniqueWithoutStructuresInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutStructuresInput[]
    | EventUpsertWithWhereUniqueWithoutStructuresInput;
  deleteMany?: EventScalarWhereInput[] | EventScalarWhereInput;
  updateMany?:
    | EventUpdateManyWithWhereNestedInput[]
    | EventUpdateManyWithWhereNestedInput;
}

export type PersonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EventUpdateWithWhereUniqueWithoutStructuresInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutStructuresDataInput;
}

export interface LocationCreateWithoutEventsInput {
  country: String;
  city: String;
  latitude: Float;
  longitude: Float;
  structures?: StructureCreateManyWithoutLocationInput;
}

export interface EventUpdateWithoutStructuresDataInput {
  name?: String;
  about?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  location?: LocationUpdateOneWithoutEventsInput;
  images?: ImageUpdateManyInput;
  authors?: PersonUpdateManyWithoutEventsInput;
  games?: GameUpdateManyWithoutEventsInput;
}

export interface EventCreateWithoutLocationInput {
  name: String;
  about: String;
  start: DateTimeInput;
  end: DateTimeInput;
  images?: ImageCreateManyInput;
  authors?: PersonCreateManyWithoutEventsInput;
  structures?: StructureCreateManyWithoutEventsInput;
  games?: GameCreateManyWithoutEventsInput;
}

export interface EventUpsertWithWhereUniqueWithoutStructuresInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutStructuresDataInput;
  create: EventCreateWithoutStructuresInput;
}

export interface GameCreateWithoutEventsInput {
  releasedAt?: DateTimeInput;
  name: String;
  about: String;
  authors?: PersonCreateManyWithoutGamesInput;
  structures?: StructureCreateManyWithoutGamesInput;
  images?: ImageCreateManyInput;
}

export interface EventUpsertWithWhereUniqueWithoutLocationInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutLocationDataInput;
  create: EventCreateWithoutLocationInput;
}

export interface PersonUpsertWithWhereUniqueWithoutEventsInput {
  where: PersonWhereUniqueInput;
  update: PersonUpdateWithoutEventsDataInput;
  create: PersonCreateWithoutEventsInput;
}

export interface StructureUpsertWithWhereUniqueWithoutPeopleInput {
  where: StructureWhereUniqueInput;
  update: StructureUpdateWithoutPeopleDataInput;
  create: StructureCreateWithoutPeopleInput;
}

export interface StructureUpsertWithWhereUniqueNestedInput {
  where: StructureWhereUniqueInput;
  update: StructureUpdateDataInput;
  create: StructureCreateInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface GameCreateWithoutStructuresInput {
  releasedAt?: DateTimeInput;
  name: String;
  about: String;
  authors?: PersonCreateManyWithoutGamesInput;
  images?: ImageCreateManyInput;
  events?: EventCreateManyWithoutGamesInput;
}

export interface ImageCreateInput {
  filename: String;
  mimetype: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type ImageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Structure {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: StructureType;
  name: String;
  about: String;
}

export interface StructurePromise extends Promise<Structure>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<StructureType>;
  name: () => Promise<String>;
  about: () => Promise<String>;
  location: <T = LocationPromise>() => T;
  people: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  structures: <T = FragmentableArray<Structure>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface StructureSubscription
  extends Promise<AsyncIterator<Structure>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<StructureType>>;
  name: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  location: <T = LocationSubscription>() => T;
  people: <T = Promise<AsyncIterator<PersonSubscription>>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  structures: <T = Promise<AsyncIterator<StructureSubscription>>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface PersonPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface PersonPreviousValuesPromise
  extends Promise<PersonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface PersonPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StructureSubscriptionPayload {
  mutation: MutationType;
  node: Structure;
  updatedFields: String[];
  previousValues: StructurePreviousValues;
}

export interface StructureSubscriptionPayloadPromise
  extends Promise<StructureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StructurePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StructurePreviousValuesPromise>() => T;
}

export interface StructureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StructureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StructureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StructurePreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Person {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface PersonPromise extends Promise<Person>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  structures: <T = FragmentableArray<Structure>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PersonSubscription
  extends Promise<AsyncIterator<Person>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  structures: <T = Promise<AsyncIterator<StructureSubscription>>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface StructureEdge {
  node: Structure;
  cursor: String;
}

export interface StructureEdgePromise
  extends Promise<StructureEdge>,
    Fragmentable {
  node: <T = StructurePromise>() => T;
  cursor: () => Promise<String>;
}

export interface StructureEdgeSubscription
  extends Promise<AsyncIterator<StructureEdge>>,
    Fragmentable {
  node: <T = StructureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface AggregatePerson {
  count: Int;
}

export interface AggregatePersonPromise
  extends Promise<AggregatePerson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonSubscription
  extends Promise<AsyncIterator<AggregatePerson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  about: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  about: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  location: <T = LocationPromise>() => T;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  authors: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  structures: <T = FragmentableArray<Structure>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  location: <T = LocationSubscription>() => T;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  authors: <T = Promise<AsyncIterator<PersonSubscription>>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  structures: <T = Promise<AsyncIterator<StructureSubscription>>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PersonConnection {
  pageInfo: PageInfo;
  edges: PersonEdge[];
}

export interface PersonConnectionPromise
  extends Promise<PersonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonEdge>>() => T;
  aggregate: <T = AggregatePersonPromise>() => T;
}

export interface PersonConnectionSubscription
  extends Promise<AsyncIterator<PersonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonSubscription>() => T;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  about: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  about: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StructurePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: StructureType;
  name: String;
  about: String;
}

export interface StructurePreviousValuesPromise
  extends Promise<StructurePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<StructureType>;
  name: () => Promise<String>;
  about: () => Promise<String>;
}

export interface StructurePreviousValuesSubscription
  extends Promise<AsyncIterator<StructurePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<StructureType>>;
  name: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
}

export interface Location {
  country: String;
  city: String;
  latitude: Float;
  longitude: Float;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  country: () => Promise<String>;
  city: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  structures: <T = FragmentableArray<Structure>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  structures: <T = Promise<AsyncIterator<StructureSubscription>>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription
  extends Promise<AsyncIterator<ImageEdge>>,
    Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GamePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  releasedAt?: DateTimeOutput;
  name: String;
  about: String;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  releasedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  about: () => Promise<String>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  releasedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Game {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  releasedAt?: DateTimeOutput;
  name: String;
  about: String;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  releasedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  about: () => Promise<String>;
  authors: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  structures: <T = FragmentableArray<Structure>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  releasedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  authors: <T = Promise<AsyncIterator<PersonSubscription>>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  structures: <T = Promise<AsyncIterator<StructureSubscription>>>(args?: {
    where?: StructureWhereInput;
    orderBy?: StructureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateStructure {
  count: Int;
}

export interface AggregateStructurePromise
  extends Promise<AggregateStructure>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStructureSubscription
  extends Promise<AsyncIterator<AggregateStructure>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ImageSubscriptionPayload {
  mutation: MutationType;
  node: Image;
  updatedFields: String[];
  previousValues: ImagePreviousValues;
}

export interface ImageSubscriptionPayloadPromise
  extends Promise<ImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImagePreviousValuesPromise>() => T;
}

export interface ImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImagePreviousValuesSubscription>() => T;
}

export interface PersonEdge {
  node: Person;
  cursor: String;
}

export interface PersonEdgePromise extends Promise<PersonEdge>, Fragmentable {
  node: <T = PersonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonEdgeSubscription
  extends Promise<AsyncIterator<PersonEdge>>,
    Fragmentable {
  node: <T = PersonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ImagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
}

export interface ImagePreviousValuesPromise
  extends Promise<ImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
}

export interface ImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  avatar: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  person: <T = PersonPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  avatar: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  person: <T = PersonSubscription>() => T;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise
  extends Promise<ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PersonSubscriptionPayload {
  mutation: MutationType;
  node: Person;
  updatedFields: String[];
  previousValues: PersonPreviousValues;
}

export interface PersonSubscriptionPayloadPromise
  extends Promise<PersonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonPreviousValuesPromise>() => T;
}

export interface PersonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonPreviousValuesSubscription>() => T;
}

export interface Image {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
}

export interface ImageSubscription
  extends Promise<AsyncIterator<Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
}

export interface LocationPreviousValues {
  country: String;
  city: String;
  latitude: Float;
  longitude: Float;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  country: () => Promise<String>;
  city: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface StructureConnection {
  pageInfo: PageInfo;
  edges: StructureEdge[];
}

export interface StructureConnectionPromise
  extends Promise<StructureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StructureEdge>>() => T;
  aggregate: <T = AggregateStructurePromise>() => T;
}

export interface StructureConnectionSubscription
  extends Promise<AsyncIterator<StructureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StructureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStructureSubscription>() => T;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise
  extends Promise<AggregateImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  },
  {
    name: "Image",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Person",
    embedded: false
  },
  {
    name: "Structure",
    embedded: false
  },
  {
    name: "StructureType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
